// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //sets x to 0 if the control bit zx is 1
    Mux16(a=x, b[0..15]= false, sel=zx, out=Xzx);
    //If the nx control bit is 1, invert each bit of x using a bitwise NOT
    Not16(in= Xzx, out= notXzx);
    //chooses between Xzx and NotXzx based on the nx
    //if nx=1 select notXzx, if nx=0 select Xzx
    //// if (nx == 1) sets x = !x 
    Mux16(a= Xzx, b= notXzx, sel= nx, out= q);

    //now the same for y:
    //sets y to 0 if the control bit zy is 1
    Mux16(a=y, b[0..15]= false, sel=zy, out=Yzy);
    //If the nx control bit is 1, invert each bit of x using a bitwise NOT
    Not16(in= Yzy, out= notYzy);
    //chooses between Xzx and NotXzx based on the nx
    //if nx=1 select notXzx, if nx=0 select Xzx
    //// if (nx == 1) sets x = !x 
    Mux16(a= Yzy, b= notYzy, sel= ny, out= p);

    // if (f == 1)  sets out = x + y
    Add16(a = q, b = p, out = qADDp);
    // if (f == 0)  sets out = x & y
    And16(a= q, b= p, out= qANDp);
    //now mux16 will chose acording to f
    Mux16(a= qANDp, b= qADDp, sel= f, out= result);
    // if (no == 1) sets out = !out
    Not16(in= result, out= notResult);

    //INDICATED WHEATHER ITS OUTPUT IS ZERO OR NEGATIVE
    //now chose between the outputs
    //if no=0 then result if no01 then notResult
    // determines if the number is negative -> if MSB=1 then negative 
    //out[..] -> splits the 16 into 8 left 8 right
    //output with names for later refered names
    Mux16(a= result, b= notResult, sel= no, out= out, out[15]=MSB, out[0..7]=right, out[8..15]=left);
    Or8Way(in= right, out= r);
    Or8Way(in= left, out= l);
    Or(a= r, b= l, out= notZL);
    Not(in= notZL, out= zr);
    //ng = 1 when MSB = 1
    Or(a= MSB, b= false, out= ng);
}